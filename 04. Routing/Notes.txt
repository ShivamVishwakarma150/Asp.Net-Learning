so whenever you have an incoming request for a particular url you will match that particular incoming http url with the list of urls that you already have so whichever the url is matching the corresponding endpoint will be invoked here endpoint is the terminology but it is actually a middleware so invoking the corresponding endpoint based on the http method and url is called as routing.


/home --> Middleware for HomePage Executed
/Office ---> Middleware for officePage Executed


is in asp.net core it is accomplished with two individual methods that is useRouting() and useEndpoints() you would like to invoke them in the same order that is first useRouting()  and after that only useEndpoints().

useRouting() :- it enables routing in your application and it selects the appropriate endpoint based on the incoming request it mainly considers the url path and also http method either get post or put or delete method but it only just selects the appropriate endpoint it doesn't execute that endpoint.

useEndpoint() :- it will actually execute the appropriate endpoint that was selected by the use routing.

Map(),MapGet(),MapPost()
------------------------

Now we are going to create endpoints by using the map methods.either you can create with map(), or MapGet() or with MapPost().
that means all those methods begin with the word map.
we are trying to map between a specific url and one middleware so whenever the url matches the corresponding endpoint should be executed.

Map() :- It will work for all HTTP methods ie, GET,POST,PUT,PATCH
but suppose your requirement is that you would like to execute your endpoint only for get request for this url but not for any other type of http method like post put etc then we have the corresponding method  that is MapGet() similarly for post you have a mapPost().

We get 405- Method not allowed when we do post request in mapGet() or  vice versa.

GetEndPoint()
-------------
for example if the user makes a get request with the url map1 the corresponding first endpoint will be picked up and it stores that information of the endpoint in the form of an end point object and you can get that endpoint object programmatically by using this getEndPoint() .

you can get the endpoint object only after use routing executes because before calling the useRouting() the appropriate endpoint was not recognized by asp.net core so that is the reason if you call get endpoint method before use routing it returns null you can get the appropriate endpoint after calling the use routing. then in that case it returns the corresponding endpoint object and it contains two important properties that is display name and request delegate.

probably the display name will be same as your url
and request delegate will be the actual endpoint that should be executed.

Route Parameters
----------------

/files/{filename}.{extension}




Optional Parameter
--------------------
suppose your requirement is in case if the user doesn't supply the id value, in this case instead of assigning a default value into that parameter you would like to take it as null by default so in case of null we can check some condition and we can print some different message to the response.

so the benefit of optional parameter is this that is you can check whether the value is supplied or not  if not supplied you can generate a different response in the real world projects also you can check some condition like this so if the value is not supplied that means if it is null value, you may not retrieve the data from database so that is the real world use case.


Route Constraints-1
---------------------

by default a parameter accepts any value into that for example if you supply an alphabetical value or numerical value or even alpha numerical value or a date value or a boolean value by default all types of values are accepted by this parameter but generally you would like to restrict the type of values .

for example i am wanting to accept only integer values in this id parameter in some other situation maybe for example in this employee profile example you would like to say some other condition saying that employee name should be alphabetical so in order to specify restrictions on the parameters there is a concept called constraints basically when an incoming request is received by the asp.net core application and it has been reached to the use routing method it will verify whether that parameter value in the url matches with the constraint so the constraint has been stored as a part of the endpoint.

so if that constraint is matched with the incoming url then it will execute the endpoint as usual otherwise it will look for the next upcoming route of course if all the routes are not matched totally it executes the final app.run() statement that is present at the end of the application request pipeline.

Route Constraints-2
---------------------

Route Parameter with Constraint:

"{parameter:constraint}"

A route parameter that has a constraint can match with a value that satisfies the given constraint.



Multiple Constraints

"{parameter:constraint1:constraint2}"

A route parameter can have more than one constraint, separated with colon ( : ).





int

Matches with any integer.

Eg: {id:int} matches with 123456789, -123456789



bool

Matches with true or false. Case-insensitive.

Eg: {active:bool} matches with true, false, TRUE, FALSE



datetime

Matches a valid DateTime value with formats "yyyy-MM-dd hh:mm:ss tt" and "MM/dd/yyyy hh:mm:ss tt".

Eg: {id:int} matches with 123456789, -123456789



decimal

Matches with a valid decimal value.

Eg: {price:decimal} matches with 49.99, -1, 0.01



long

Matches a valid long value.

Eg: {id:long} matches with 123456789, -123456789



guid

Matches with a valid Guid value (Globally Unique Identifier - A hexadecimal number that is universally unique).

Eg: {id:guid} matches with 123E4567-E89B-12D3-A456-426652340000



minlength(value)

Matches with a string that has at least specified number of characters.

Eg: {username:minlength(4)} matches with John, Allen, William



maxlength(value)

Matches with a string that has less than or equal to the specified number of characters.

Eg: {username:maxlength(7)} matches with John, Allen, William



length(min,max)

Matches with a string that has number of characters between given minimum and maximum length (both numbers including).

Eg: {username:length(4, 7)} matches with John, Allen, William



length(value)

Matches with a string that has exactly specified number of characters.

Eg: {tin:length(9)} matches with 987654321



min(value)

Matches with an integer value greater than or equal to the specified value.

Eg: {age:min(18)} matches with 18, 19, 100



max(value)

Matches with an integer value less than or equal to the specified value.

Eg: {age:max(100)} matches with -1, 1, 18, 100



range(min,max)

Matches with an integer value between the specified minimum and maximum values (both numbers including).

Eg: {age:range(18,100)} matches with 18, 19, 99, 100



alpha

Matches with a string that contains only alphabets (A-Z) and (a-z).

Eg: {username:alpha} matches with rick, william



regex(expression)

Matches with a string that matches with the specified regular expression.

Eg 1: {age:regex(^[0-9]{2}$)} matches with any two-digit number, such as 10, 11, 98, 99

Eg 2: {age:regex(^\d{3}-\d{3}$)} matches with any three-digit number, then hyphen, and then three-digit number, such as 123-456


Custom Route Constraint class
------------------------------

suppose this particular regular expression constraint has to be applied in more than one place in your entire application so instead of manually repeating the same regular expression in everywhere you can also convert the same as a custom constraint means you will create a class only for the constraint.

the custom constraint works equivalent to a normal constraint but instead of a simple constraint it would be a class that means upon receiving the request while verifying the route it will check that custom constraint means it executes the custom constraint class it checks whether the incoming request value matches with this custom constraint or not by executing a method called match() so if it matches it executes the endpoint 
the custom constraint works equivalent to a normal constraint but instead of a simple constraint it would be a class that means upon receiving the request while verifying the route it will check that custom constraint means it executes the custom constraint class it checks whether the incoming request value matches with this custom constraint or not by executing a method called match so if it matches it executes the endpoint otherwise it will go to the next row to  check the incoming request.
 

it implements an interface called IRouteConstraint so that this interface rules that you have to define a method called match so this particular match method will be executed in order to verify whether the incoming request matches with this constraint or not.


now we have successfully created a constraint but we have to apply the same to the actual route before then that we have to add this class as a constraint class in the builder so switch back to the program.cs file before calling this build method just like you have added a service we have to add that constraint to the builder then only the builder can recognize the constraint because it's a custom constraint, we have to register it. 
 
 
imagine in a real-world projects in case if you can create this constraint and give to other co-developers so any other core developers who is 
working in the same project can make reuse of the same class instead of recreating the regular expression on their own while creating the end point here they can simply write months so that automatically means we are going to check all this code so if you would like to use it only one time in the entire project .there is no specific benefit of creating the custom constraint but for repeated usage for reusability it's a good idea to create custom constraint but in general it is rare to use the custom constraints because in general validation of the parameters is better idea than creating the constraints.



 